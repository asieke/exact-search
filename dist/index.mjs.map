{"version":3,"sources":["../src/search.ts"],"sourcesContent":["type Params = {\n\tdata: Record<string, string>[];\n\tindexFields: string[];\n\tresultFields: string[];\n};\n\nexport type Result = {\n\tmatch: Record<string, string> | null;\n\tscore: number;\n\tresult: Record<string, string>;\n};\n\nexport class ExactSearch {\n\tprivate data: Record<string, string>[];\n\tprivate indexFields: string[];\n\tprivate resultFields: string[];\n\n\tconstructor({ data, indexFields, resultFields }: Params) {\n\t\tthis.data = data;\n\t\tthis.indexFields = indexFields;\n\t\tthis.resultFields = resultFields;\n\t}\n\n\tpublic search(query: string, limit: number = 10) {\n\t\tconst results: Result[] = [];\n\n\t\tthis.data.forEach((item: Record<string, string>) => {\n\t\t\tlet temp: Result = { match: null, score: 0, result: {} };\n\t\t\tthis.indexFields.forEach((field: string) => {\n\t\t\t\t// Use a regular expression to find the query at the start of a token (word)\n\t\t\t\tconst regex = new RegExp(`\\\\b${query}`, 'i');\n\t\t\t\tconst match = item[field].match(regex);\n\n\t\t\t\tif (match) {\n\t\t\t\t\tconst startIndex = match.index!;\n\t\t\t\t\tconst count = item[field].toLowerCase().split(regex).length - 1;\n\t\t\t\t\tconst words = item[field].split(' ').length;\n\n\t\t\t\t\tthis.resultFields.forEach((resultField: string) => {\n\t\t\t\t\t\ttemp.result[resultField] = item[resultField];\n\t\t\t\t\t});\n\t\t\t\t\t// get a substring that is the query and the subsequent 20 characters\n\t\t\t\t\tconst substr = item[field].substring(startIndex, startIndex + 30);\n\t\t\t\t\ttemp.match = { ...temp.match, [field]: substr };\n\t\t\t\t\ttemp.score += count / words;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (temp.match) {\n\t\t\t\tresults.push(temp);\n\t\t\t}\n\t\t});\n\n\t\tresults.sort((a, b) => b.score - a.score);\n\n\t\tif (results.length > limit) {\n\t\t\treturn results.slice(0, limit);\n\t\t}\n\n\t\treturn results;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAYO,IAAM,cAAN,MAAkB;AAAA,EAKxB,YAAY,EAAE,MAAM,aAAa,aAAa,GAAW;AACxD,SAAK,OAAO;AACZ,SAAK,cAAc;AACnB,SAAK,eAAe;AAAA,EACrB;AAAA,EAEO,OAAO,OAAe,QAAgB,IAAI;AAChD,UAAM,UAAoB,CAAC;AAE3B,SAAK,KAAK,QAAQ,CAAC,SAAiC;AACnD,UAAI,OAAe,EAAE,OAAO,MAAM,OAAO,GAAG,QAAQ,CAAC,EAAE;AACvD,WAAK,YAAY,QAAQ,CAAC,UAAkB;AAE3C,cAAM,QAAQ,IAAI,OAAO,MAAM,KAAK,IAAI,GAAG;AAC3C,cAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,KAAK;AAErC,YAAI,OAAO;AACV,gBAAM,aAAa,MAAM;AACzB,gBAAM,QAAQ,KAAK,KAAK,EAAE,YAAY,EAAE,MAAM,KAAK,EAAE,SAAS;AAC9D,gBAAM,QAAQ,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE;AAErC,eAAK,aAAa,QAAQ,CAAC,gBAAwB;AAClD,iBAAK,OAAO,WAAW,IAAI,KAAK,WAAW;AAAA,UAC5C,CAAC;AAED,gBAAM,SAAS,KAAK,KAAK,EAAE,UAAU,YAAY,aAAa,EAAE;AAChE,eAAK,QAAQ,iCAAK,KAAK,QAAV,EAAiB,CAAC,KAAK,GAAG,OAAO;AAC9C,eAAK,SAAS,QAAQ;AAAA,QACvB;AAAA,MACD,CAAC;AACD,UAAI,KAAK,OAAO;AACf,gBAAQ,KAAK,IAAI;AAAA,MAClB;AAAA,IACD,CAAC;AAED,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAExC,QAAI,QAAQ,SAAS,OAAO;AAC3B,aAAO,QAAQ,MAAM,GAAG,KAAK;AAAA,IAC9B;AAEA,WAAO;AAAA,EACR;AACD;","names":[]}