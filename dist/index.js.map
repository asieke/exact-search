{"version":3,"sources":["../src/index.ts","../src/search.ts"],"sourcesContent":["export { ExactSearch, createClient } from './search';\nexport type { SearchResult } from './search';\n","export interface SearchResult<R extends { matches: any; results: any }> {\n  matches: Partial<R['matches']>;\n  results: R['results'];\n  score: number;\n}\n\ninterface ExactSearchParams<R extends { matches: any; results: any }> {\n  data: Array<Record<string, any>>;\n  matchFields: Array<keyof R['matches']>;\n  resultFields: Array<keyof R['results']>;\n}\n\n/**\n * ExactSearch class performs exact search operations on provided data.\n */\nexport class ExactSearch<R extends { matches: any; results: any }> {\n  private data: Array<Record<string, any>>;\n  private matchFields: Array<keyof R['matches']>;\n  private resultFields: Array<keyof R['results']>;\n\n  constructor(params: ExactSearchParams<R>) {\n    this.data = params.data;\n    this.matchFields = params.matchFields;\n    this.resultFields = params.resultFields;\n  }\n\n  /**\n   * Performs the search operation.\n   * @param query The search string.\n   * @param limit The maximum number of results to return.\n   * @returns An array of search results.\n   */\n  search(query: string, limit: number = 10): SearchResult<R>[] {\n    const results: SearchResult<R>[] = [];\n    const regex = new RegExp(`\\\\b${this.escapeRegExp(query)}`, 'i');\n\n    this.data.forEach((item) => {\n      const matches: Partial<R['matches']> = {};\n      let score = 0;\n\n      this.matchFields.forEach((field) => {\n        const fieldValue = item[field as keyof typeof item];\n        if (typeof fieldValue !== 'string') {\n          return;\n        }\n\n        const match = fieldValue.match(regex);\n        if (match) {\n          const startIndex = match.index as number;\n          const substring = fieldValue.substring(\n            startIndex,\n            Math.min(startIndex + 30, fieldValue.length)\n          );\n          matches[field] = substring;\n\n          // Calculate score based on number of matches and field length\n          const count = (fieldValue.match(regex) || []).length;\n          const words = fieldValue.split(/\\s+/).length;\n          score += count / words;\n        }\n      });\n\n      if (Object.keys(matches).length > 0) {\n        const resultData: Partial<R['results']> = {};\n        this.resultFields.forEach((field) => {\n          resultData[field] = item[field as keyof typeof item];\n        });\n\n        results.push({\n          matches: matches as R['matches'],\n          score,\n          results: resultData as R['results'],\n        });\n      }\n    });\n\n    // Sort results by score in descending order\n    results.sort((a, b) => b.score - a.score);\n\n    // Return limited results\n    return results.slice(0, limit);\n  }\n\n  /**\n   * Escapes special characters in a string for use in a regular expression.\n   * @param text The input string.\n   * @returns The escaped string.\n   */\n  private escapeRegExp(text: string): string {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }\n}\n\n/**\n * Factory function to create an ExactSearch client.\n * @param params Parameters for initializing the ExactSearch client.\n * @returns An instance of ExactSearch.\n */\nexport function createClient<R extends { matches: any; results: any }>(\n  params: ExactSearchParams<R>\n): ExactSearch<R> {\n  return new ExactSearch<R>(params);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACeO,IAAM,cAAN,MAA4D;AAAA,EAKjE,YAAY,QAA8B;AACxC,SAAK,OAAO,OAAO;AACnB,SAAK,cAAc,OAAO;AAC1B,SAAK,eAAe,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,OAAe,QAAgB,IAAuB;AAC3D,UAAM,UAA6B,CAAC;AACpC,UAAM,QAAQ,IAAI,OAAO,MAAM,KAAK,aAAa,KAAK,CAAC,IAAI,GAAG;AAE9D,SAAK,KAAK,QAAQ,CAAC,SAAS;AAC1B,YAAM,UAAiC,CAAC;AACxC,UAAI,QAAQ;AAEZ,WAAK,YAAY,QAAQ,CAAC,UAAU;AAClC,cAAM,aAAa,KAAK,KAA0B;AAClD,YAAI,OAAO,eAAe,UAAU;AAClC;AAAA,QACF;AAEA,cAAM,QAAQ,WAAW,MAAM,KAAK;AACpC,YAAI,OAAO;AACT,gBAAM,aAAa,MAAM;AACzB,gBAAM,YAAY,WAAW;AAAA,YAC3B;AAAA,YACA,KAAK,IAAI,aAAa,IAAI,WAAW,MAAM;AAAA,UAC7C;AACA,kBAAQ,KAAK,IAAI;AAGjB,gBAAM,SAAS,WAAW,MAAM,KAAK,KAAK,CAAC,GAAG;AAC9C,gBAAM,QAAQ,WAAW,MAAM,KAAK,EAAE;AACtC,mBAAS,QAAQ;AAAA,QACnB;AAAA,MACF,CAAC;AAED,UAAI,OAAO,KAAK,OAAO,EAAE,SAAS,GAAG;AACnC,cAAM,aAAoC,CAAC;AAC3C,aAAK,aAAa,QAAQ,CAAC,UAAU;AACnC,qBAAW,KAAK,IAAI,KAAK,KAA0B;AAAA,QACrD,CAAC;AAED,gBAAQ,KAAK;AAAA,UACX;AAAA,UACA;AAAA,UACA,SAAS;AAAA,QACX,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAGD,YAAQ,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAGxC,WAAO,QAAQ,MAAM,GAAG,KAAK;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOQ,aAAa,MAAsB;AACzC,WAAO,KAAK,QAAQ,uBAAuB,MAAM;AAAA,EACnD;AACF;AAOO,SAAS,aACd,QACgB;AAChB,SAAO,IAAI,YAAe,MAAM;AAClC;","names":[]}